//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.3

use schemars::JsonSchema;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize, JsonSchema,
)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "transaction_type")]
pub enum TransactionType {
    /// For **finalized** incoming transactions - all items within suborders of this transaction will be considered as additive towards inventory (i.e. incoming shipment of goods)
    #[sea_orm(string_value = "in")]
    In,
    /// For **finalized** outgoing transactions - all items within suborders of this transaction will be considered as subtractive towards inventory (i.e. sale of good to customer)
    #[sea_orm(string_value = "out")]
    Out,
    /// For **proposed** incoming transactions - all items within suborders of this transaction will be considered as additive towards inventory upon finalization (i.e. active purchase order for incoming shipment of goods)
    #[sea_orm(string_value = "pending-in")]
    PendingIn,
    /// For **proposed** outgoing transactions - all items within suborders of this transaction will be considered as subtractive towards inventory upon finalization (i.e. reserved/allocated goods)
    #[sea_orm(string_value = "pending-out")]
    PendingOut,
    /// For **saved** transactions - for all transactions saved temporarily. Acts identically to "Quote" but where quotes are retrieved by order number, saved will be time limited and culled.
    #[sea_orm(string_value = "saved")]
    Saved,
    /// For **quoted** transactions - to be given to customers as an promise of cost
    #[sea_orm(string_value = "quote")]
    Quote,
}
